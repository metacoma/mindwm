classes:
  - common

  - nushell
  - mindwm.shell

    # - mindwm.context

    #- mindwm.docker.context

  - vim
  - tmuxinator
  - bash.kapitan
  - tmuxinator.kapitan

  - terminal.emulator.xterm
  - mindwm.textfsm
  - kafka

  - mindwm.clipboard
  - rabbitmq.common
  - mindwm.k8s
  - rabbitmq.k8s
parameters:
  target_name: mindwm

  bash:
    functions:
      mindwm-objects: |
        KAFKA_NODE_PORT=`kubectl get svc -n kafka ${kafka_cluster_name}-kafka-external-0 --output='jsonpath={.spec.ports[0].nodePort}'`
        docker run --rm -it --network host edenhill/kafkacat:1.6.0 -b $(minikube ip):$KAFKA_NODE_PORT -t mindwm-objects -C

  #amqp_url: "amqp://${rabbitmq_user}:${rabbitmq_password}@${rabbitmq_release_name}.${rabbitmq_namespace}:5672/%2f"
  amqp_url: 'amqp://user:password@192.168.49.2:30466/%2f'

  mindwm_clipboard:
    env:
      RABBITMQ_URL: ${amqp_url}
      QUEUE_NAME: clipboard


  mindwm:
    clipboard:
      detect_url:
        name: url
        requirements:
          - urlextract
        import:
          - from urlextract import URLExtract
        init: |
          extractor = URLExtract()
        callback: |
          clipboard_text = getClipboardText(event)
          for url in extractor.find_urls(clipboard_text):
            debug(f"found {url}")
            event_payload = event['payload']
            event_payload['url'] = url
            new_event(clipboard_url, url)

  context:
    - input: '^ssh (?P<SSH_HOST>.*)$'
      groovy: |
        node = node.createChild(SSH_HOST)
        node.details = stdout_data
        node.icons.add('ssh')
        c.select(node)

    - output: 'Welcome to Ubuntu (?P<UBUNTU_RELEASE>[^ ]+)'
      groovy: |
        node['ubuntu'] = UBUNTU_RELEASE
        node.icons.add('ubuntu')

#    tmuxinator:
#      name: ${target_name}

  io-context:
    - input: "^ip a show"
      key: INTERFACE
      # https://github.com/networktocode/ntc-templates/blob/master/ntc_templates/templates/linux_ip_address_show.textfsm
      textfsm: |
         Value Required ID (\d+)
         Value Required INTERFACE ([^:]+)
         Value Required FLAGS (\S+)
         Value Required MTU (\d+)
         Value Required QDISC (\S+)
         Value Required STATE (\S+)
         Value Required GROUP (\S+)
         Value QLEN (\d+)
         Value MASTER (\S+)
         Value Required TYPE (\S+)
         Value ADDRESS ((?:[a-fA-F0-9:]{17}))
         Value BROADCAST ((?:[a-fA-F0-9:]{17}))
         Value List IP_ADDRESSES ([0-9\.]+)
         Value List IP_MASKS (\d{1,2})
         Value List IPV6_ADDRESSES ([0-9A-Fa-f:]+)
         Value List IPV6_MASKS (\d{1,3})

         Start
           ^\d+: -> Continue.Record
           ^\${ID}:\s+\${INTERFACE}:\s+<\${FLAGS}>\s+mtu\s+\${MTU}\s+qdisc\s+\${QDISC}(?:\s+master\s+\${MASTER})?\s+state\s+\${STATE}\s+group\s+\${GROUP}(?:\s+qlen\s+\${QLEN})?\s*$$
           ^\s+link/\${TYPE}(?:\s+\${ADDRESS}\s+brd\s+\${BROADCAST})?.*$$
           ^\s+altname.*$$
           ^\s+inet\s+\${IP_ADDRESSES}/\${IP_MASKS}\s+(:?brd|scope).*$$
           ^\s+inet6\s+\${IPV6_ADDRESSES}/\${IPV6_MASKS}\s+(?:brd|scope).*$$
           ^\s+valid_lft.*$$
           ^\s*$$
           ^. -> Error



